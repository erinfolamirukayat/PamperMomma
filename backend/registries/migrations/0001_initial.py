# Generated by Django 5.0.14 on 2025-06-02 17:45

import django.db.models.deletion
import registries.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DefaultService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the default service.', max_length=255, verbose_name='Default Service Name')),
                ('description', models.TextField(blank=True, help_text='A description of the default service.', verbose_name='Description')),
                ('hours', models.PositiveIntegerField(default=1, help_text='The number of hours the default service will be provided.', verbose_name='Hours')),
                ('cost_per_hour', models.DecimalField(decimal_places=2, default=0.0, help_text='The cost per hour for the default service.', max_digits=10, verbose_name='Cost Per Hour in USD')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the default service was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the default service was last updated.', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Default Service',
                'verbose_name_plural': 'Default Services',
            },
        ),
        migrations.CreateModel(
            name='DefaultRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover_image', models.ImageField(blank=True, help_text='An optional cover image for the default registry.', null=True, upload_to='default_registries/', verbose_name='Cover Image')),
                ('name', models.CharField(help_text='The name of the default registry.', max_length=255, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the default registry was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the default registry was last updated.', verbose_name='Updated At')),
                ('default_services', models.ManyToManyField(help_text='The default services included in this registry template.', related_name='default_registries', to='registries.defaultservice', verbose_name='Services')),
            ],
            options={
                'verbose_name': 'Default Registry',
                'verbose_name_plural': 'Default Registries',
            },
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the registry owner.', max_length=255, verbose_name='Name')),
                ('is_first_time', models.BooleanField(default=False, help_text='Indicates if this is the first child for the mother.', verbose_name='Is First Time Mom')),
                ('babies_count', models.PositiveIntegerField(default=1, help_text='The number of babies the mother has.', verbose_name='Babies Count')),
                ('shareable_id', models.CharField(default=registries.models.generate_shareable_id, editable=False, help_text='A unique identifier for sharing the registry.', max_length=255, unique=True, verbose_name='Shareable ID')),
                ('arrival_date', models.DateField(blank=True, help_text='The expected date of arrival for the baby.', null=True, verbose_name='Expected Arrival Date')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the registry was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the registry was last updated.', verbose_name='Updated At')),
                ('created_by', models.ForeignKey(help_text='The user who created the registry.', on_delete=django.db.models.deletion.CASCADE, related_name='registries', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Registry',
                'verbose_name_plural': 'Registries',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the service.', max_length=255, verbose_name='Service Name')),
                ('description', models.TextField(blank=True, help_text='A description of the service.', verbose_name='Description')),
                ('hours', models.PositiveIntegerField(default=1, help_text='The number of hours the service will be provided.', verbose_name='Hours')),
                ('cost_per_hour', models.DecimalField(decimal_places=2, default=0.0, help_text='The cost per hour for the service.', max_digits=10, verbose_name='Cost Per Hour in USD')),
                ('allow_volunteers', models.BooleanField(default=False, help_text='Indicates if volunteers can contribute to this service.', verbose_name='Allow Volunteers')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the service is currently active.', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the service was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the service was last updated.', verbose_name='Updated At')),
                ('registry', models.ForeignKey(help_text='The registry to which this service belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='services', to='registries.registry', verbose_name='Registry')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='The amount contributed towards the service.', max_digits=10, verbose_name='Amount')),
                ('summary', models.TextField(blank=True, help_text='A brief summary of the contribution.', verbose_name='Summary')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the contribution was made.', verbose_name='Created At')),
                ('contributor', models.ForeignKey(help_text='The user who made the contribution.', on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to=settings.AUTH_USER_MODEL, verbose_name='Contributor')),
                ('service', models.ForeignKey(help_text='The service for which the contribution is made.', on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='registries.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Contribution',
                'verbose_name_plural': 'Contributions',
            },
        ),
        migrations.CreateModel(
            name='SharedRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the registry was shared.', verbose_name='Created At')),
                ('registry', models.OneToOneField(help_text='The registry that is shared.', on_delete=django.db.models.deletion.CASCADE, related_name='shared_registry', to='registries.registry', verbose_name='Registry')),
                ('shared_with', models.ForeignKey(help_text='The user with whom the registry is shared.', on_delete=django.db.models.deletion.CASCADE, related_name='shared_registries', to=settings.AUTH_USER_MODEL, verbose_name='Shared With')),
            ],
            options={
                'verbose_name': 'Shared Registry',
                'verbose_name_plural': 'Shared Registries',
            },
        ),
        migrations.CreateModel(
            name='VolunteerContribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeframe_from', models.DateTimeField(help_text='The start date and time of the volunteer contribution.', verbose_name='Timeframe From')),
                ('timeframe_to', models.DateTimeField(help_text='The end date and time of the volunteer contribution.', verbose_name='Timeframe To')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the volunteer contribution was made.', verbose_name='Created At')),
                ('service', models.ForeignKey(help_text='The service for which the volunteer contribution is made.', on_delete=django.db.models.deletion.CASCADE, related_name='volunteer_contributions', to='registries.service', verbose_name='Service')),
                ('volunteer', models.ForeignKey(help_text='The user who volunteered for the service.', on_delete=django.db.models.deletion.CASCADE, related_name='volunteer_contributions', to=settings.AUTH_USER_MODEL, verbose_name='Volunteer')),
            ],
            options={
                'verbose_name': 'Volunteer Contribution',
                'verbose_name_plural': 'Volunteer Contributions',
            },
        ),
    ]
